[build-system]
requires = ["maturin ~= 1.2.3"]
build-backend = "maturin"

[project]
name = "rustpy01"
version = "0.1.0"
requires-python = ">=3.10"
classifiers = [
    "Development Status :: 2 - Pre-Alpha",
    "Intended Audience :: Developers",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Rust",
    "Topic :: Utilities",
]
dependencies = [
    'maturin ~= 1.2.3; platform_system != "Linux"',           # patchelf is only supported on Linux
    'maturin[patchelf] ~= 1.2.3; platform_system == "Linux"',
    "wheel >= 0.41.2",
]

[project.optional-dependencies]
test = [
    "bashate ~= 2.1.1",
    "black ~= 23.9.1",
    'coverage ~= 7.3.0; python_version >= "3.11"',
    'coverage[toml] ~= 7.3.0; python_version <= "3.10"',
    "fixit ~= 2.0.0.post1",
    "mypy ~= 1.5.1",
    "pylint ~= 2.17.6",
    'pyright==1.1.329; platform_system == "Linux"',
    "pytest ~= 7.4.2",
    "pytest-black ~= 0.3.12",
    "pytest-cov ~= 4.1.0",
    "pytest-dependency ~= 0.5.1",
    "pytest-instafail ~= 0.5.0",
    "pytest-mypy ~= 0.10.3",
    "pytest-pylint ~= 0.19.0",
    "pytest-randomly ~= 3.15.0",
    "pytest-ruff ~= 0.1.1",
    "pytest-xdist ~= 3.3.1",
    # "refurb ~= 1.21.0",
    "ruff==0.0.291",
    "semgrep ~= 1.41.0",
    "sphinx ~= 7.2.6",
    "vulture ~= 2.9.1",
]

[project.scripts]
print_cli_args = "rustpy01._rustpy01:print_cli_args"
print_something = "rustpy01._rustpy01:print_something"

[tool.maturin]
features = ["pyo3/extension-module"]
python-source = "python"
module-name = "rustpy01._rustpy01"

##### Other tools #####

[tool.coverage.report]
# Taken from: https://coverage.readthedocs.io/en/coverage-5.5/config.html#syntax
exclude_lines = [
    "def __repr__",               # Ignore missing debug-only code
    "except ImportError(.*):",    # Likely Python version-specific code
    "if 0:",                      # Ignore non-runnable code not being run
    "if TYPE_CHECKING:",
    "if __name__ == .__main__.:", # Ignore non-runnable code not being run
    "pragma: no cover",
    "raise AssertionError",       # Ignore tests not hitting defensive assertion code
    "raise NotImplementedError",  # Ignore tests not hitting defensive assertion code
]
fail_under = 20 # Minimum code coverage percent
show_missing = true

[tool.coverage.run]
concurrency = ["multiprocessing"]
omit = [
    "*/.egg/*",
    "*/.eggs/*",
    "*/.tox/*",
    "*/__main__.py",
    "*/build/*",
    "*/dist/*",
]
parallel = true
sigterm = true
source = ["python/rustpy01/", "python/tests/"]

[tool.mypy]
disallow_any_unimported = true
exclude = ["build/", "target/"]
namespace_packages = true
python_version = "3.10"
show_error_codes = true
strict = true
warn_unreachable = true

# Add Python modules to be ignored by mypy here
[[tool.mypy.overrides]]
module = ["rustpy01._rustpy01"]
ignore_missing_imports = true

[tool.pylint.basic]
# Good variable names which should always be accepted, separated by a comma
good-names = ["_", "ex", "f", "g", "i", "j", "k", "Run"]

[tool.pylint.design]
max-attributes = 12

[tool.pylint.format]
max-line-length = 88

[tool.pylint.imports]
allow-any-import-level = ["resource", "winreg"]

[tool.pylint.main]
# Use multiple processes to speed up Pylint.
# Note that sometimes the duplicate-code checker runs properly only when set to 1
jobs = 3
# Whole list retrieved on 2023-02-02 from: https://pylint.pycqa.org/en/latest/user_guide/checkers/extensions.html
load-plugins = [
    "pylint.extensions.bad_builtin",
    "pylint.extensions.broad_try_clause",
    "pylint.extensions.check_elif",
    "pylint.extensions.code_style",
    # comparetozero plugin will need to be modified from pylint 3.x
    "pylint.extensions.comparetozero",
    "pylint.extensions.comparison_placement",
    "pylint.extensions.confusing_elif",
    "pylint.extensions.consider_refactoring_into_while_condition",
    "pylint.extensions.consider_ternary_expression",
    "pylint.extensions.dict_init_mutate",
    "pylint.extensions.docparams",
    "pylint.extensions.docstyle",
    "pylint.extensions.dunder",
    "pylint.extensions.empty_comment",
    # emptystring plugin will need to be modified from pylint 3.x
    "pylint.extensions.emptystring",
    "pylint.extensions.eq_without_hash",
    "pylint.extensions.for_any_all",
    # "pylint.extensions.magic_value",  # Too-opinionated
    "pylint.extensions.mccabe",
    "pylint.extensions.no_self_use",
    "pylint.extensions.overlapping_exceptions",
    "pylint.extensions.private_import",
    "pylint.extensions.redefined_loop_name",
    "pylint.extensions.redefined_variable_type",
    "pylint.extensions.set_membership",
    "pylint.extensions.typing",
    "pylint.extensions.while_used",
]
# Pickle collected data for later comparisons
persistent = "no"

[tool.pylint.similarities]
ignore-comments = "no"
# Ignore imports when computing similarities
ignore-imports = "yes"
min-similarity-lines = 5

[tool.pylint.messages_control]
disable = ["locally-disabled", "suppressed-message"]
enable = [
    "bad-inline-option",
    "c-extension-no-member",
    "deprecated-pragma",
    "eq-without-hash",
    "file-ignored",
    "raw-checker-failed",
    "use-symbolic-message-instead",
    "useless-suppression",
]

[tool.pylint.parameter_documentation]
accept-no-param-doc = "no"
accept-no-raise-doc = "no"
accept-no-return-doc = "no"
accept-no-yields-doc = "no"

[tool.pylint.reports]
# Activate the evaluation score
score = "no"

[tool.pylint.typing]
# Min Python version to use for typing related checks, e.g. ``3.7``
# This should be equal to the min supported Python version of the project
py-version = "3.10"

[tool.pyright]
exclude = ["**/node_modules", "**/__pycache__", "**/.*", "build/", "target/"]

[tool.pytest.ini_options]
addopts = [
    "-n=auto",
    "--durations=7",
    "--ignore=target/",
    "--instafail",
    "--no-cov-on-fail",
    "--pylint-error-types=CRWEFI",
    "--strict-markers",
]
filterwarnings = []
log_level = "DEBUG"
markers = ["online", "slow"]
xfail_strict = true

[tool.refurb]
ignore = ["110"]

[tool.ruff]
src = ["python"]
include = ["*.py", "*.pyi", "**/pyproject.toml", "*.ipynb"]
select = ["ALL"]
ignore = [
    "ANN101",  # The type of Self should be inferred by type checkers automatically
    "COM812",  # Seems to add trailing comma even when arguments already fit on one line
    "D104",    # __init__.py files can be completely blank and not require a docstring
    "D203",    # D211 is used by default, which is incompatible with this
    "D213",    # D212 is used by default, which is incompatible with this
    "EM101",   # String literals is used in exception constructors, stack is readable
    "EM102",   # f-string literals is used in exception constructors, similar to EM101
    "PLR2004", # Difficult to refactor to not use magic values in a big legacy project
    "S603",    # Allow using subprocess methods w/o shell=True, bandit severity is low
    "TRY003",  # Allow specifying long messages outside the exception class
]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]
target-version = "py310"

[tool.ruff.isort]
force-single-line = true
force-sort-within-sections = true

[tool.vulture]
exclude = ["build/", "docs/source/conf_correct.py"]
make_whitelist = true
